--------
 SYSTEM
--------

You are an expert in both Python and SOAR cognitive architecture. You are helping to develop code for a household robot that has a decision-making process similar to the SOAR cognitive architecture. Specifically, you will translate the English description of production rules into Python implementation of the production rule.

As a recap, a production rule has the form "IF ... THEN ..." where the IF part captures the preconditions of this production rule, and the THEN part leads to an action proposal.
Specifically for developing the robot, you will be completing the following code template for each production rule:
```py
class YourProduction: # TODO: replace the name with yours; letters only, no numbers

    target_task: str = ...  # define what kind of task this production is for, e.g. "place a/an <object> in/on a/an <receptacle>". If the production is not meant to be task-specific, set `target_task` to an empty string. Note that this is only for annotation purposes, you still have to test for the task in the `precondition` function below.

    def precondition(
        self, 
        current_task: str,
        current_location: str, # The object_name of the large receptacle that the robot is in front of (e.g. Fridge_12da98, Cabinet_d83acc, CounterTop4, etc.)
        previous_tasks: Dict[str, bool], # A dictionary that maps previously attempted tasks to their outcome. True means successful execution while False means otherwise. If a task is never attempted before then it will not be included in this dictionary
        spatial_knowledge: SpatialKnowledge, 
        object_knowledge: ObjectKnowledge,
    ) -> Tuple[bool, str]:
        """
        Test if the precondition is met given the current information.
        Set variable bindings if necessary.
        This corresponds to the IF part of the production rule.
        Return (True, "") if the precondition is met.
        Otherwise, return (False, <reason for failure>) where the reason for failure should reflect which part of the precondition is not met.
        """
        # TODO: fill in your code here
        # you may use setattr(self, <key>, <value>) to set variables to hold actual objects from the environment.

    def apply(self) -> str:
        """
        Return the action if this production is applicable to the current state.
        This corresponds to the THEN part of the production rule.
        """
        # TODO: fill in your code here

    # you may also define your own helper functions
```

The following code snippet defines the components of spatial_knowledge and object_knowledge. You may use them in your code completion. You may also use any Python built-in functions and anything in the Python regex package (initialized by `import re`). Regex is very helpful when you want to generalize string matching in your production.
```py
# The following list defines the object types for large receptacles in the kitchen
list_of_large_receptacles = [
    "CounterTop",
    "Cabinet",
    "Drawer",
    "Fridge",
    "SinkBasin",
]


class Object(NamedTuple):
    """
    Representation for all objects (including receptacles)
    Keep track of object attributes
    """

    object_name: str # name of the object, unique in the environment
    object_type: str # type of the object, e.g. Mug, Apple, Microwave, ...
    location: str # which receptacle can the object be found
    supporting: str # receptacle or another object that is supporting this object
    openable: bool = False # whether this object is a container that can be open/closed
    opened: bool = False # whether this object is opened, undefined if the object is not a container
    pickable: bool = False # whether this object can be picked up by the robot
    toggleable: bool = False # whether this object is an appliance that can be turned on/off
    toggled: bool = False # whether this object is turned on, undefined if the object is not an appliance
    cookable: bool = False # whether this object can be cooked
    cooked: bool = False # whether this object is cooked
    dirty: bool = False # whether this object is dirty
    Sliced: bool = False # whether this object is a slice

    def __eq__(self, other: Union["Object", str]) -> bool:
        """
        If <other> is an object, return if the object_name matches. 
        If <other> is a string, return if the string matches the current object_name or object_type.
        """


class Receptacle:
    """
    Representation for large receptacles such as CounterTop, Cabinet, Fridge, etc.
    Keep track of the objects that are supported by the receptacle (either directly or indirectly)
    """

    object_name: str # name of the receptacle, unique in the environment
    object_type: str # type of the receptacle, e.g. CounterTop, Drawer, ...
    hosting: Optional[List[Objects]] # a list of objects known to be in/on this receptacle; None if this receptacle is unexplored.
    visited: bool # whether the receptacle has been fully explored

    def __contains__(self, key: str) -> bool:
        """
        Return whether an object is known to exist in/on this receptacle.
        The key could be either an object name or an object type.
        """

    def __eq__(self, other: Union["Object", str]) -> bool:
        """
        If <other> is an object, return if the object_name matches. 
        If <other> is a string, return if the string matches the current object_name or object_type.
        """

    def get_hosting(self) -> Optional[List[Object]]:
        """
        Return a list of objects known to be in/on this receptacle.
        Return None if this receptacle has never been visited so it is unclear what it has.
        Return an empty list if this receptacle is known to be empty.
        """


class Gripper(Receptacle):  # the robot's gripper is represented as a receptacle
    object_name = "RobotGripper"
    object_type = "Gripper"
    hosting: List[Object] = [] # objects that are directly or indirectly supported by the robot's gripper; empty list if the gripper is unoccupied
    visited = True # the robot always has full knowledge of its gripper status


class SpatialKnowledge:
    """
    The existing spatial knowledge of the kitchen, including where the known objects are, how far away are the large receptacles
    Note that spatial knowledge only contains large receptacles as defined in the `list_of_large_receptacles`, other smaller objects such as microwaves, plates, etc. are not included in the spatial knowledge despite their ability to support other objects
    But spatial knowledge also includes information about the robot's gripper as the gripper is a special kind of receptacle
    Also keep in mind spatial knowledge does not encode the state of the large receptacles (e.g. whether the Fridge is opened). If you need such information, you would need to get it from object knowledge
    """

    locations: Dict[str, Receptacle] # a dictionary that maps the name of receptacles to receptacle objects

    def __getitem__(self, receptacle_name: str) -> Optional[Receptacle]:
        """
        Return the corresponding receptacle object (if exist) given the name or type of the receptacle.
        e.g. spatial_knowledge["RobotGripper"] returns the gripper object
        """

    def get_distance(self, location: str) -> float:
        """
        Return the distance from the robot's current location to the specific location.
        """


class ObjectKnowledge:
    """
    The existing knowledge of objects seen in the kitchen
    Do not include unexplored receptacles
    """

    objects: Dict[str, Object] # a dictionary that maps the name of objects to objects.

    def __getitem__(self, key: Union[str, Receptacle]) -> Optional[Object]:
        """
        Return the object that has the same name or type of the key (if any).
        If the key is a Receptacle object, return the corresponding Object object (if seen by the robot before).
        Note that unexplored receptacles are not included in object knowledge and will return None.
        """

    def __contains__(self, key: str) -> bool:
        """
        Return whether the robot knows anything about a specific object or object type. 
        Note that unexplored receptacles are not included in object knowledge and will return False.
        """
```

Additionally, you may use the following function to query whether a general statement is true. This might help express the preconditions that are beyond the robot's knowledge.
```py
def OracleQuery(statement: str) -> bool:
    """
    Return whether the input statement is true or false
    """
```
The statement you provided should be self-contained and its correctness should be independent from the current environment of the robot. You may use natural language for the statement you want to test.
Good example: "Eggs are commonly stored in the fridge"
Good example: "Lettuce is a kind of vegetable"
Bad example: "There is an egg in the fridge"
Bad example: "The robot's gripper is empty"
Bad example: "Where is Egg typically stored?"
Bad example: "How to make a sandwich"

Another helper function is defined to ensure consistent object name/type comparison. This is helpful if you want to check if a specific object fits the description.
```py
def name_equal(name1: str, name2: str) -> bool:
    """
    Return whether the two names are referring the same object
    """
```
Examples:
```
>>> name_equal("Drawer_13da9f", "drawer")
True
>>> name_equal("Knife_d9d12c", "Fork")
False
>>> name_equal("Cabinet", "cabinet")
True
>>> name_equal(obj.object_type, "apple") # returns whether the object is an apple
```
================================================================================
------
 USER
------

[Relevant Information]
 * The current task is to slice a lettuce.
 * The lettuce on CounterTop2 is already sliced.
 * The robot's gripper is holding a knife.

[Specific Rule]
IF the current task is to slice a lettuce AND the lettuce is already sliced AND the robot's gripper is holding a knife THEN choose Special action: 'done'.

[Generalizable Constants]
 * "lettuce" could be any sliceable object.
 * "CounterTop2" could be any countertop or similar surface where slicing can be performed.

[Generalized Rule]
IF the current task is to slice a/an <sliceable> AND the <sliceable> is already sliced AND the robot's gripper is holding a knife THEN choose Special action: 'done'.

[Correspondence]
 * <sliceable> is the lettuce in the specific rule.

Notes: This rule applies when the robot is tasked with slicing an object that is already sliced. It checks the current task, the state of the object to be sliced, and whether the robot is holding a knife. If all conditions are met, it concludes that the task is done.

----

Given the description above, generate the corresponding Python implementation for the [Generalized Rule] step by step:

First, analyze the [Relevant Information] and the IF part of the [Generalized Rule] and determine what variable bindings are needed. For each of the variables, identify how the value for the variable should be assigned (e.g. parsed from current_task, iterate through all receptacles, etc.) Additionally, state what constraint(s) should the value satisfy.

Next, for each of the preconditions, identify whether they are related to a variable. If so, list the variable(s) they are related to, and also state which attribute(s) of the variable is being constrained on. Pay attention to the implicit constraints. For example, "robot holding the target knife" constrains both the robot holding the target object, and the target object being a knife. Otherwise, state what part(s) are they concerned with (e.g. current task). Use the exact words from the [Generalized Rule] as names for each predicate, do not just say "the first predicate" or paraphrase.

Then, plan how to test for each of the constraints in the previous section. Which part of knowledge corresponds to each predicate in the preconditions?
As a reminder, you must not use direct string comparison (`==` or `!=`) when comparing object types, object names, or location names. Always use `name_compare` to avoid compatibility issues.

Finally, using all the information above, write the Python implementation by filling in the production rule template. Include all the variable bindings, preconditions, and effects. Comment your code properly.

As a reminder, all actions returned by the `effect` function of the productions should have one of the following prefixes.
 * motor action: ...
 * attend to subtask: ...
 * special action: ...

Also, set your `target_task` to slice a/an <sliceable>.

Use the following format:
[Variable Bindings]
 * name of variable 1: a brief description of what this variable is for. Its value should be assigned based on the current task.
 * name of variable 2: a brief description of variable 2. Its value should be assigned based on the current location. It has to be a ...
 * name of variable 3: a brief description of variable 3. Its value should be assigned by iterating through all receptacles and finding the receptacle that ...
 * ...

[Precondition Relation]
 * "predicate 1" is about the current task
 * "predicate 2" is about the object type of variable 1 and attribute 2 of variable 2
 * ...

[Precondition Test]
 * The robot's gripper is empty can be tested by checking if `spatial_knowledge["RobotGripper"].hosting == []`
 * The target receptacle is opened can be tested by checking if `object_knowledge[spatial_knowledge[target_receptacle]].opened`
 * The target receptacle is not empty can be tested by checking if `spatial_knowledge[target_receptacle].hosting is not None and spatial_knowledge[target_receptacle].hosting != []`
 * "predicate 4" can be tested by iterating through all the receptacles and ...
 * ...

[Python Implementation]
```py
<Your Code Here>
```
================================================================================
-----------
 ASSISTANT
-----------

[Variable Bindings]
 * target_object: the object that needs to be sliced. Its value should be parsed from the current task.
 * knife: the knife that the robot is holding. Its value should be assigned by checking the robot's gripper.

[Precondition Relation]
 * "the current task is to slice a/an <sliceable>" is about the current task
 * "the <sliceable> is already sliced" is about the sliced attribute of target_object
 * "the robot's gripper is holding a knife" is about the object type of knife and the hosting attribute of the robot's gripper

[Precondition Test]
 * The current task is to slice a/an <sliceable> can be tested by checking if `current_task.startswith("slice") and name_equal(target_object.object_type, current_task.split(" ")[1])`
 * The <sliceable> is already sliced can be tested by checking if `target_object.sliced`
 * The robot's gripper is holding a knife can be tested by checking if `knife is not None and name_equal(knife.object_type, "knife")`

[Python Implementation]
```py
class SliceAlreadySlicedObject:

    target_task: str = "slice a/an <sliceable>"

    def precondition(
        self, 
        current_task: str,
        current_location: str,
        previous_tasks: Dict[str, bool],
        spatial_knowledge: SpatialKnowledge, 
        object_knowledge: ObjectKnowledge,
    ) -> Tuple[bool, str]:
        # Parse the target object from the current task
        if not current_task.startswith("slice"):
            return False, "The current task is not to slice an object"
        target_object_name = current_task.split(" ")[1]
        target_object = object_knowledge[target_object_name]
        if target_object is None:
            return False, f"No knowledge about the target object {target_object_name}"
        setattr(self, "target_object", target_object)

        # Check if the target object is already sliced
        if not target_object.sliced:
            return False, f"The target object {target_object_name} is not sliced"

        # Check if the robot's gripper is holding a knife
        knife = spatial_knowledge["RobotGripper"].hosting[0] if spatial_knowledge["RobotGripper"].hosting else None
        if knife is None or not name_equal(knife.object_type, "knife"):
            return False, "The robot's gripper is not holding a knife"
        setattr(self, "knife", knife)

        return True, ""

    def apply(self) -> str:
        return "special action: done"
```
================================================================================
------
 USER
------

The precondition of the code you generated did not pass the following test case:

[Current Task] slice a/an lettuce

[Current Location] CounterTop2

[Spatial Knowledge]
 * (0.0 meters away) RobotGripper(Gripper) has Knife_ca524131(Knife), and nothing else
 * (0.0 meters away) Cabinet_178a2f0f(Cabinet) has been explored: it is empty
 * (0.0 meters away) Cabinet_8dc96e98(Cabinet) has been explored: it is empty
 * (0.0 meters away) CounterTop2(CounterTop) has been fully explored: it has Lettuce_5_Slice_8(LettuceSliced), Lettuce_5_Slice_7(LettuceSliced), Lettuce_5_Slice_6(LettuceSliced), Lettuce_5_Slice_5(LettuceSliced), Lettuce_5_Slice_4(LettuceSliced), Lettuce_5_Slice_3(LettuceSliced), Lettuce_5_Slice_2(LettuceSliced), Lettuce_5_Slice_1(LettuceSliced), Pot_9f2885d6(Pot), Bread_593c0a50(Bread), Spatula_3be0e373(Spatula), and nothing else
 * (0.6 meters away) StoveBurner_58b674c4(StoveBurner) has been explored: it is empty
 * (4.3 meters away) Cabinet_bc977650(Cabinet) has been explored: it is empty
 * (4.3 meters away) CounterTop3(CounterTop) has been fully explored: it has Kettle_be5728db(Kettle), Plate_c86da238(Plate), PaperTowelRoll_e706f28b(PaperTowelRoll), SoapBottle_0aa9ed0b(SoapBottle), and nothing else
 * (4.3 meters away) Drawer_f530e642(Drawer) has been explored: it is empty
 * (10.1 meters away) CounterTop1(CounterTop) has been fully explored: it has Bowl_4d53055e(Bowl), Fork_2cc30f52(Fork), Ladle_5881d727(Ladle), Potato_204aef67(Potato), ButterKnife_a9c551d5(ButterKnife), Spoon_50c12622(Spoon), Mug_0e746896(Mug), and nothing else
 * (11.0 meters away) SinkBasin_28084e25(SinkBasin) has been fully explored: it has Cup_26e78d79(Cup), Egg_113844f2(Egg), and nothing else
 * (11.9 meters away) CounterTop4(CounterTop) has been explored: it is empty
 * (21.1 meters away) Fridge_683c888d(Fridge) has been fully explored: it has Tomato_6d952733(Tomato), Apple_969aaa5d(Apple), and nothing else
 * (22.2 meters away) CounterTop5(CounterTop) has been fully explored: it has Pan_f348c8b4(Pan), and nothing else
 * (22.3 meters away) Cabinet_2fee59ce(Cabinet) has been explored: it is empty
 * (22.3 meters away) Cabinet_5c8637ba(Cabinet) has been explored: it is empty

[Object Knowledge]
 * Apple_969aaa5d(Apple) at Fridge_683c888d
 * Bowl_4d53055e(Bowl) at CounterTop1 clean,
 * Bread_593c0a50(Bread) at CounterTop2
 * ButterKnife_a9c551d5(ButterKnife) at CounterTop1
 * Cabinet_178a2f0f(Cabinet): opened,
 * Cabinet_2fee59ce(Cabinet): opened,
 * Cabinet_5c8637ba(Cabinet): opened,
 * Cabinet_8dc96e98(Cabinet): opened,
 * Cabinet_bc977650(Cabinet): opened,
 * Cup_26e78d79(Cup) at SinkBasin_28084e25 clean,
 * Drawer_f530e642(Drawer): opened,
 * Egg_113844f2(Egg) at SinkBasin_28084e25
 * Faucet_63e88a3b(Faucet):turned off,
 * Fork_2cc30f52(Fork) at CounterTop1
 * Fridge_683c888d(Fridge): opened,
 * GarbageCan_ace47f8a(GarbageCan)
 * Kettle_be5728db(Kettle) at CounterTop3: closed,
 * Knife_ca524131(Knife) at RobotGripper
 * Ladle_5881d727(Ladle) at CounterTop1
 * Lettuce_5_Slice_1(LettuceSliced) at CounterTop2 sliced,
 * Lettuce_5_Slice_2(LettuceSliced) at CounterTop2 sliced,
 * Lettuce_5_Slice_3(LettuceSliced) at CounterTop2 sliced,
 * Lettuce_5_Slice_4(LettuceSliced) at CounterTop2 sliced,
 * Lettuce_5_Slice_5(LettuceSliced) at CounterTop2 sliced,
 * Lettuce_5_Slice_6(LettuceSliced) at CounterTop2 sliced,
 * Lettuce_5_Slice_7(LettuceSliced) at CounterTop2 sliced,
 * Lettuce_5_Slice_8(LettuceSliced) at CounterTop2 sliced,
 * Mug_0e746896(Mug) at CounterTop1 clean,
 * Pan_f348c8b4(Pan) at CounterTop5 clean,
 * PaperTowelRoll_e706f28b(PaperTowelRoll) at CounterTop3
 * Plate_c86da238(Plate) at CounterTop3 clean,
 * Pot_9f2885d6(Pot) at CounterTop2 clean,
 * Potato_204aef67(Potato) at CounterTop1: uncooked,
 * SinkBasin_28084e25(SinkBasin)
 * Sink_e57378e4(Sink)
 * SoapBottle_0aa9ed0b(SoapBottle) at CounterTop3
 * Spatula_3be0e373(Spatula) at CounterTop2
 * Spoon_50c12622(Spoon) at CounterTop1
 * StoveBurner_1bea7495(StoveBurner)
 * StoveBurner_58b674c4(StoveBurner)
 * StoveBurner_70d61138(StoveBurner)
 * StoveBurner_da949af1(StoveBurner)
 * StoveKnob_5203e0e0(StoveKnob):turned off,
 * StoveKnob_607dc719(StoveKnob):turned off,
 * StoveKnob_6a0edf00(StoveKnob):turned off,
 * StoveKnob_8a66ac87(StoveKnob):turned off,
 * Tomato_6d952733(Tomato) at Fridge_683c888d

[Previous Tasks]
 * go to explore a/an countertop5: True
 * go to explore a/an cabinet_2fee59ce: True
 * go to explore a/an countertop4: True
 * go to explore a/an sinkbasin_28084e25: True
 * find a/an lettuce: True
 * go to explore a/an cabinet_178a2f0f: True
 * go to explore a/an stoveburner_58b674c4: True
 * go to explore a/an countertop3: True
 * go to explore a/an cabinet_bc977650: True
 * go to explore a/an countertop1: True
 * find a/an knife: True

[Expected Return of `precondition()`]
(True, "")

[Your Code Return]
The target object a/an is not sliced

You are going to debug this step-by-step, and generate a new implementation for the production.

First, reflect on what the returned message tells you about where the error is.

Next, identify what the error is.
Pay special attention to the following checklist:
 * Did you forget to use `name_equal` to compare location or object names?
 * Did you forget to set the variable bindings?
 * Is there a problem with how you generate variable bindings?
 * Is there a mismatch between your code and the provided interface? Is there something wrong with your preview response?

Then, explain what needs to be changed to your original code implementation.

Finally, generate a new implementation for the production above.

Use the following format:
[Error Interpretation]
The message indicates that ... has failed.

[Error attribution]
The error is because ...

[Things to change]
The ... test should be ...

[Python Implementation]
```py
<Your New Code Here>
```
================================================================================
-----------
 ASSISTANT
-----------

[Error Interpretation]
The message indicates that the precondition test for whether the target object is sliced has failed.

[Error Attribution]
The error is because the target object is parsed incorrectly from the current task. The current task is "slice a/an lettuce", and the target object name should be "lettuce", not "a/an".

[Things to Change]
The parsing of the target object from the current task should be corrected. The target object name should be the third word in the current task, not the second.

[Python Implementation]
```py
class SliceAlreadySlicedObject:

    target_task: str = "slice a/an <sliceable>"

    def precondition(
        self, 
        current_task: str,
        current_location: str,
        previous_tasks: Dict[str, bool],
        spatial_knowledge: SpatialKnowledge, 
        object_knowledge: ObjectKnowledge,
    ) -> Tuple[bool, str]:
        # Parse the target object from the current task
        if not current_task.startswith("slice"):
            return False, "The current task is not to slice an object"
        target_object_name = current_task.split(" ")[2]
        target_object = object_knowledge[target_object_name]
        if target_object is None:
            return False, f"No knowledge about the target object {target_object_name}"
        setattr(self, "target_object", target_object)

        # Check if the target object is already sliced
        if not target_object.sliced:
            return False, f"The target object {target_object_name} is not sliced"

        # Check if the robot's gripper is holding a knife
        knife = spatial_knowledge["RobotGripper"].hosting[0] if spatial_knowledge["RobotGripper"].hosting else None
        if knife is None or not name_equal(knife.object_type, "knife"):
            return False, "The robot's gripper is not holding a knife"
        setattr(self, "knife", knife)

        return True, ""

    def apply(self) -> str:
        return "special action: done"
```
================================================================================

<<<META INFO>>>
total tokens: 5960 finished reason: stop model name: gpt-4-0613